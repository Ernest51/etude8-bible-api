#!/usr/bin/env python3
"""
Test du syst√®me d'enrichissement automatique
"""

import sys
sys.path.append('/app/backend')

from verse_by_verse_content import get_verse_by_verse_content, get_all_verses_for_chapter
from server import generate_enriched_theological_explanation, generate_smart_fallback_explanation
import asyncio

def test_local_library():
    """Test la biblioth√®que locale enrichie"""
    print("=== TEST BIBLIOTH√àQUE LOCALE ENRICHIE ===")
    
    # Test Gen√®se 1
    genese_1 = get_verse_by_verse_content("Gen√®se", 1)
    print(f"Gen√®se 1 contient {len(genese_1)} versets enrichis")
    
    if 1 in genese_1:
        verset_1 = genese_1[1]
        print(f"Gen√®se 1:1 - {verset_1['verse'][:50]}...")
        print(f"Explication: {verset_1['explanation'][:100]}...")
    
    # Test Jean 3:16
    jean_3 = get_verse_by_verse_content("Jean", 3)
    if 16 in jean_3:
        verset_16 = jean_3[16]
        print(f"\nJean 3:16 - {verset_16['verse']}")
        print(f"Explication: {verset_16['explanation'][:150]}...")
    
    # Test couverture des livres
    from verse_by_verse_content import VERSE_BY_VERSE_LIBRARY
    print(f"\nLivres couverts: {list(VERSE_BY_VERSE_LIBRARY.keys())}")
    
    total_versets = 0
    for livre, chapitres in VERSE_BY_VERSE_LIBRARY.items():
        for chapitre, versets in chapitres.items():
            total_versets += len(versets)
    
    print(f"Total versets enrichis dans la base: {total_versets}")

def test_smart_fallback():
    """Test le syst√®me de fallback intelligent"""
    print("\n=== TEST SYST√àME DE FALLBACK INTELLIGENT ===")
    
    # Test diff√©rents types de versets
    test_cases = [
        ("Car Dieu a tant aim√© le monde...", "Jean", 3, 16),
        ("Au commencement, Dieu cr√©a les cieux et la terre.", "Gen√®se", 1, 1),
        ("Je suis la r√©surrection et la vie.", "Jean", 11, 25),
        ("L'√âternel est mon berger, je ne manquerai de rien.", "Psaumes", 23, 1),
    ]
    
    for verse_text, book, chap, vnum in test_cases:
        explanation = generate_smart_fallback_explanation(verse_text, book, chap, vnum)
        print(f"\n{book} {chap}:{vnum}")
        print(f"Verset: {verse_text}")
        print(f"Explication (fallback): {explanation[:200]}...")

async def test_enrichment_system():
    """Test du syst√®me d'enrichissement complet"""
    print("\n=== TEST SYST√àME D'ENRICHISSEMENT COMPLET ===")
    
    verse_text = "Car Dieu a tant aim√© le monde qu'il a donn√© son Fils unique..."
    book, chap, vnum = "Jean", 3, 16
    
    print(f"Test enrichissement pour {book} {chap}:{vnum}")
    print(f"Verset: {verse_text}")
    
    # Test avec enrichissement activ√©
    enriched_explanation = await generate_enriched_theological_explanation(
        verse_text, book, chap, vnum, enriched=True
    )
    
    print(f"\nExplication enrichie:")
    print(enriched_explanation)

def main():
    """Fonction principale de test"""
    print("üöÄ Test du syst√®me d'enrichissement automatique")
    print("=" * 60)
    
    # Tests synchrones
    test_local_library()
    test_smart_fallback()
    
    # Test asynchrone
    print("\nüîÑ Lancement du test d'enrichissement...")
    try:
        asyncio.run(test_enrichment_system())
    except Exception as e:
        print(f"Erreur dans le test d'enrichissement: {e}")
    
    print("\n‚úÖ Tests termin√©s!")

if __name__ == "__main__":
    main()